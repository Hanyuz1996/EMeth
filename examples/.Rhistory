y <- Y_ab[k,]
opt <- optim(nu0[k],fn=function(a){
sum(abs(y-eta * a)*W[k,])},gr = 'Brent')
temp = opt$par
nu0[k] = max(0,min(1,temp))
}
}
nu0.m    = matrix(rep(nu0,times = I),ncol = I,byrow = FALSE)
Mu      = mu %*% t(rho) + nu0.m %*% diag(eta)
if(V == 'b'){
Vf = mu00 %*% t(rho)
Vf = Vf + matrix(rep(nu0*(1-nu0),ncol(Y)),ncol=ncol(Y),byrow=FALSE) %*% diag(eta)
Vc = sigma_c * sigma_c * Vf
Va = lambda * Vc
}else if(V == 'c'){
Vf = matrix(1, K,I)
}else if(V == 'w'){
Vf = weight %*% t(rho^2)
Vf = Vf + matrix(rep(nu0*(1-nu0),ncol(Y)),ncol=ncol(Y),byrow=FALSE) %*% diag(eta)
}
sigma_a = (sum(gamma*(abs(Y-Mu))/Vf)/sum(gamma))
sigma_c = (sum((1-gamma)*(abs(Y-Mu))/Vf)/sum(1-gamma))
lambda = sigma_a/sigma_c
Va = Vf * sigma_a
Vc = Vf * sigma_c
# Check convergence
if(max(abs(rho_old-rho))<1e-4){break}
}
list(rho = rho, sigma_c = sigma_c, lambda = lambda,nu0 = nu0, pi_a = pi_a, gamma = gamma, weights = W, iter = iter)
}
deconvEM_CV_laplace <- function(Y,eta,mu,aber = TRUE, V = 'c', weight = matrix(1,5,5),
pi_a_init, rho_init, nu0_init = rep(0,50), sigma_c_init, lambda_init = 10,
nu = penlist, folds = 5, usesubset = TRUE, maxiter=50, verbose = FALSE){
if(length(nu) == 1){
result = deconvEM_laplace(Y,eta,mu,aber,V,weight = weight, pi_a_init,rho_init,nu0_init,
sigma_c_init,lambda_init,nu=nu,maxiter)
return(list(result,nu))
}
rdnumber <- runif(nrow(Y))
losslist <- matrix(NA, nrow = folds, ncol = length(nu))
for(i in 1:folds){
testind <- which(rdnumber < i/folds & rdnumber > (i-1)/folds )
trainind <- setdiff(1:nrow(Y),testind)
sampind <- 1:ncol(Y)
if(usesubset){
nsamp <- min(50, ncol(Y))
sampind <- sample(ncol(Y),nsamp)
}
Y_train <- Y[trainind,sampind]
Y_test  <- Y[testind,sampind]
pi_a_train <- pi_a_init[sampind]
eta_train <- eta[sampind]
mu_train<- mu[trainind,]
#weight_train <- weight[trainind,sampind]
mu_test <- mu[testind,]
rho_init_train <- rho_init[sampind,]
nu0_init_train <- nu0_init[trainind]
nu0test <- rep(0,length(testind))
for(j in 1:length(nu)){
#  print('In cross validation')
temp   <- deconvEM_laplace(Y_train,eta_train,mu_train,aber,V,
,pi_a_train,rho_init_train,nu0_init_train,
sigma_c_init,lambda_init,nu=nu[j],maxiter = 10)
rhotest<- temp$rho
pred   <- mu_test %*% t(rhotest)
Y_ab     = Y_test - pred
nu0test <- lapply(1:length(testind),FUN=function(l){
min(1,max(0,sum(eta_train * Y_ab[l,])/sum(eta_train^2)))
})
nu0test <- unlist(nu0test)
nu0test.m <- matrix(rep(nu0test,times = length(sampind)),ncol = length(sampind),byrow = FALSE)
losslist[i,j] <-  mean((Y_ab - nu0test.m %*% diag(eta_train))^2)
}
}
avaloss <- apply(losslist,2,mean,na.rm = TRUE)
choosenu <- nu[which((avaloss) == min(avaloss))]
print('finish cross validation')
result = deconvEM_laplace(Y,eta,mu,aber,V,weight = weight,pi_a_init,rho_init,nu0_init,
sigma_c_init,lambda_init,nu=choosenu,maxiter, verbose = verbose)
return(list(result,choosenu,losslist))
}
#-------------------------------------------------------------
# emeth: high level wrapper for the package
#-------------------------------------------------------------
# deconv.init: a function for default initialization
deconv.init <- function(Y,eta,mu,aber = TRUE){
temp       = runif(simsize * length(cellTypes)) * 0.2 -0.1
rho_init   = matrix(0.5,ncol = length(cellTypes), nrow = ncol(Y))
nu0_init   = runif(nrow(Y))
sigma_c_init = 0.1
lambda_init  = 2
pi_a_init   = rep(0.5,simsize)
for(j in 1:ncol(Y)){
if(j %% 50 == 0){ cat(j, date(), "\n") }
y    = Y[,j]
X    = as.data.frame(mu)
Xmat = mu
temp            = lm(y ~ .-1,data = X)$coefficients
temp[temp < 0]  = 0
rho_init[j,]    = (1-eta[j])*temp/sum(temp)
}
K = nrow(Y)
Y_ab     = Y - mu %*% t(rho_init)
if(aber){
for(k in 1:K){
nu0_init[k] = min(1,max(0,sum(eta * Y_ab[k,])/sum(eta^2)))
}
}
init.paras <- list(weight = matrix(1,5,5),
pi_a_init = pi_a_init, rho_init = rho_init, nu0_init = nu0_init,
sigma_c_init=0.1 , lambda_init = 10)
return(init.paras)
}
emeth <- function(Y,eta,mu,aber,V, init = 'default', family = 'laplace',
nu = 0, maxiter = 50, verbose = FALSE){
if(init == 'default'){
initlist = deconv.init(Y,eta,mu,aber)
}
else{
initlist = init
}
weight = initlist$weight
pi_a_init = initlist$pi_a_init
rho_init = initlist$rho_init
nu0_init = initlist$nu0_init
sigma_c_init = initlist$sigma_c_init
lambda_init = initlist$lambda_init
if(family == 'laplace'){
result = deconvEM_laplace(Y,eta,mu,aber,V,weight = weight,pi_a_init,rho_init,nu0_init,
sigma_c_init,lambda_init,nu=choosenu,maxiter, verbose = verbose)
return(result)
}
else if(family == 'normal'){
result = deconvEM(Y,eta,mu,aber,V,weight = weight,pi_a_init,rho_init,nu0_init,
sigma_c_init,lambda_init,nu=choosenu,maxiter, verbose = verbose)
return(result)
}
else{
stop("Must specify the family from laplace or normal!")
}
}
cv.emeth <- function(Y,eta,mu,aber,V, init = 'default', nu = 0, family = 'laplace',
folds = 5, usesubset = TRUE, maxiter = 50, verbose = FALSE){
if(init == 'default'){
initlist = deconv.init(Y,eta,mu,aber)
}
else{
initlist = init
}
weight = initlist$weight
pi_a_init = initlist$pi_a_init
rho_init = initlist$rho_init
nu0_init = initlist$nu0_init
sigma_c_init = initlist$sigma_c_init
lambda_init = initlist$lambda_init
if(family == 'laplace'){
result = deconvEM_CV_laplace(Y,eta,mu,aber = aber, V = 'c', weight,
pi_a_init, rho_init, nu0_init, sigma_c_init, lambda_init,
nu, folds, usesubset, maxiter, verbose = verbose)
}
else if(family == 'normal'){
result = deconvEM_CV(Y,eta,mu,aber = aber, V = 'c', weight,
pi_a_init, rho_init, nu0_init, sigma_c_init, lambda_init,
nu, folds, usesubset, maxiter, verbose = verbose)
}
else{
stop("Must specify the family from laplace or normal!")
}
}
package.skeleton(name = "EMeth", list = ls())
setwd('~/Desktop/EMeth/pipelines/CombinedStudy/')
library(nnls)
library(data.table)
library(MASS)
library(quadprog)
library(ggplot2)
library(e1071)
dir = getwd()
source("EstimatingMethylation.R")
set.seed(1750905)
gen_methy_beta <- function(mu,alpha,sample.size, pi=0, cellnum = 100, noise){
cellNum = cellnum
rho = matrix(NA,nrow = sample.size, ncol = length(cellTypes))
beta = matrix(NA, nrow= nrow(mu), ncol = length(cellTypes))
Y = V = matrix(0, nrow = nrow(mu),ncol = sample.size)
rho   = matrix(0.2*runif(sample.size * length(cellTypes))-0.1,ncol = length(cellTypes))
rho   = rho + matrix(rep(alpha,sample.size),nrow = sample.size)
rho   = rho/rowSums(rho)
eta   = runif(sample.size)*0.1
rho   = diag(1-eta) %*% rho
colnames(rho) = cellTypes
nu0   = runif(nrow(mu))
nu0.m = matrix(rep(nu0,times = sample.size),ncol = sample.size,byrow = FALSE)
Y = mu %*% t(rho) + nu0.m %*% diag(eta)
V = matrix(1/cellNum)
pi.m = rep(runif(sample.size,pi-0.05,pi+0.05),nrow(Y))
idic         = runif(n = nrow(mu)*sample.size) < pi.m
mixerr       = rnorm(n = nrow(mu)*sample.size) * as.vector(t(sqrt(V)))
mixerr[idic] = sqrt(noise) * mixerr[idic]
mixerr       = matrix(mixerr,nrow = nrow(mu), ncol = sample.size, byrow = TRUE)
list(bulk_sample = Y + mixerr, mix = rho, V = V,eta = eta, nu0 = nu0, idic = idic)
}
runsim <- function(simsize,simnoise,simpi,reptime,aber = FALSE, penalty = penalty, cellnum,maxiter = 50 ){
genes2use = rownames(mu_gen)
mean2pert = sample(genes2use, floor(simpi*length(genes2use)))
mugenpert = mu_gen
for(cpg in mean2pert){
cell_temp = sample(cellTypes,7)
mugenpert[cpg,cell_temp] = runif(7)
}
simdata   = gen_methy_beta(mugenpert,alpha,sample.size = simsize, pi = simpi, cellnum = cellnum,noise = simnoise)
print("Data generated")
Y         = simdata$bulk_sample
eta       = simdata$eta
nu0       = simdata$nu0
rho.true  = simdata$mix
idic.true = simdata$idic
V.true    = simdata$V
nu0cor    = rep(0,length(cellTypes))
for(i in 1:length(cellTypes)){
nu0cor[i] = cor(nu0,mu[,i])
}
sigma_c   = 0.1
sigma_a   = simnoise * sigma_c
#-------------------------------------------------------------
# Estimating rho_qi by several methods: wls; ls; rls; qp
#-------------------------------------------------------------
methods = c("LaplaceEM","OriEM","svr","ls","rls","qp")
rho     = array(data = NA, dim = c(nrow(rho.true),ncol(rho.true),length(methods)+1),
dimnames = list(1:nrow(rho.true),cellTypes,c(methods,"true")))
err     = array(data = NA, dim = c(nrow(rho.true),ncol(rho.true),length(methods)),
dimnames = list(1:nrow(rho.true),cellTypes,methods))
rho[,,length(methods)+1]=rho.true
temp       = runif(simsize * length(cellTypes)) * 0.2 -0.1
rho_init   = matrix(temp,ncol = length(cellTypes))
nu0_init   = runif(nrow(Y))
sigma_c_init = 0.1
lambda_init  = 2
pi_a   = rep(0.5,simsize)
C = c(0.1,1/sqrt(10),1,sqrt(10),10)
for(j in 1:ncol(Y)){
if(j %% 50 == 0){ cat(j, date(), "\n") }
y    = Y[,j]
X    = as.data.frame(mu)
Xmat = mu
cv_svr = rep(0,5)
svrmodel1       = svm(y~., data = X,kernel = 'linear', cost = 0.1, cross= 5)
cv_svr[1]       = mean(svrmodel1$MSE)
svrmodel2       = svm(y~., data = X,kernel = 'linear', cost = 1/sqrt(10), cross= 5)
cv_svr[2]       = mean(svrmodel2$MSE)
svrmodel3       = svm(y~., data = X,kernel = 'linear', cost = 1, cross= 5)
cv_svr[3]       = mean(svrmodel2$MSE)
svrmodel4       = svm(y~., data = X,kernel = 'linear', cost = sqrt(10), cross= 5)
cv_svr[4]       = mean(svrmodel2$MSE)
svrmodel5       = svm(y~., data = X,kernel = 'linear', cost = 10)
cv_svr[5]       = mean(svrmodel5$MSE)
best_svr        = which.min(cv_svr)
svrmodel        = svm(y~., data = X, kernel = 'linear', cost = C[best_svr])
temp            = (t(svrmodel$coefs) %*% svrmodel$SV)
temp[temp < 0]  = 0
rho[j,,'svr']   = (1-eta[j])*temp/sum(temp)
temp            = lm(y ~ .-1,data = X)$coefficients
temp[temp < 0]  = 0
rho[j,,'ls']    = (1-eta[j])*temp/sum(temp)
temp            = rlm(y ~ .-1,data = X)$coefficients
temp[temp < 0]  = 0
rho[j,,'rls']   = (1-eta[j])*temp/sum(temp)
A = rbind(diag(rep(1,length(cellTypes))),rep(-1,length(cellTypes)))
b = c(rep(0,length(cellTypes)),-1+eta[j])
D = t(Xmat) %*% Xmat
d = t(t(Xmat) %*% y)
rho[j,,'qp']   = (solve.QP(D,d,t(A),b)$solution)
}
rho_init = rho[,,'ls']
K = nrow(Y)
Y_ab     = Y - mu %*% t(rho_init)
if(aber){
for(k in 1:K){
nu0_init[k] = min(1,max(0,sum(eta * Y_ab[k,])/sum( eta^2)))
}
}
#temp <- apply(s2,1,max)
#temp <- temp/median(temp)
#lb <- quantile(temp,0.15)
#ub <- quantile(temp,0.85)
#temp[temp<lb] <- lb
#temp[temp>ub] <- ub
#W <- matrix(rep(temp,ncol(Y)),ncol = ncol(Y),byrow = FALSE)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
rho[,,'LaplaceEM'] = hundrediter_laplace[[1]]$rho
print('OriEM')
hundrediter = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'normal', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
rho[,,'OriEM'] = hundrediter[[1]]$rho
for(k in 1:length(methods)){
err[,,k] = (rho[,,k]-rho.true)^2
}
err.mean = sqrt(apply(err,c(2,3),mean))
cormat <- matrix(NA,nrow = length(cellTypes),ncol = length(methods))
colnames(cormat) <- methods
rownames(cormat) <- cellTypes
rss <- matrix(NA,nrow = length(cellTypes),ncol = length(methods))
colnames(rss) <- methods
rownames(rss) <- cellTypes
print(table(is.na(rho.true)))
print(table(is.na(rho)))
for(i in 1:length(cellTypes)){{
cormat[i,] <- sapply(1:length(methods), FUN = function(j){{
cor(rho[,i,methods[j]],rho.true[,i])
}})
rss[i,] <- sapply(1:length(methods), FUN = function(j){{
temp <- lm(rho.true[,i]~rho[,i,methods[j]])
return(sum(temp$residuals^2))
}})
}}
#  dir.create(sprintf('../figures/%s',Sys.Date()))
#  dir.create(sprintf('../figures/%s/%d',Sys.Date(),reptime))
#  for(i in 1:length(cellTypes)){{
#  pdf(sprintf('../figures/%s/%d/%s-%s-%s-estimate-vs-true.pdf',Sys.Date(),reptime,cellnum, simnoise, cellTypes[i]))
#  plist = list()
#  plist <- lapply(1:length(methods), FUN = function(j){{
#    tempdata = cbind(res.rho[,i,methods[j]],rho.true[,i])
#    colnames(tempdata) <- c("methylation","true")
#    newplot <- ggplot(data = as.data.frame(tempdata), aes(x=methylation,y=true))+ xlim(0,0.3) + ylim(0,0.3) +
#      geom_point() + geom_abline(intercept = 0,slope = 1) + ggtitle(methods[j])
#  }})
#  grid.arrange(grobs = plist,ncol=2)
#  dev.off()
#}}
#print(nu0cor)
list(rho = rho, err = err.mean, cor = cormat,
laplace = hundrediter_laplace[[1]],
ori = hundrediter[[1]],
true = simdata,
rss = rss,
nu0cor = nu0cor)
}
mu
save(mu,file='muexample.RData')
genes2use = rownames(mu_gen)
mean2pert = sample(genes2use, floor(simpi*length(genes2use)))
mugenpert = mu_gen
for(cpg in mean2pert){
cell_temp = sample(cellTypes,7)
mugenpert[cpg,cell_temp] = runif(7)
}
simpi = 0.1
genes2use = rownames(mu_gen)
mean2pert = sample(genes2use, floor(simpi*length(genes2use)))
mugenpert = mu_gen
for(cpg in mean2pert){
cell_temp = sample(cellTypes,7)
mugenpert[cpg,cell_temp] = runif(7)
}
simdata   = gen_methy_beta(mugenpert,alpha,sample.size = simsize, pi = simpi, cellnum = cellnum,noise = simnoise)
cellnum = 0.001
cellnum=1000
simdata   = gen_methy_beta(mugenpert,alpha,sample.size = simsize, pi = simpi, cellnum = cellnum,noise = simnoise)
simsize = 100
simdata   = gen_methy_beta(mugenpert,alpha,sample.size = simsize, pi = simpi, cellnum = cellnum,noise = simnoise)
alpha
alpha = rep(1/7,7)
simdata   = gen_methy_beta(mugenpert,alpha,sample.size = simsize, pi = simpi, cellnum = cellnum,noise = simnoise)
simnoise = 10
simdata   = gen_methy_beta(mugenpert,alpha,sample.size = simsize, pi = simpi, cellnum = cellnum,noise = simnoise)
Y         = simdata$bulk_sample
eta       = simdata$eta
nu0       = simdata$nu0
rho.true  = simdata$mix
save(Y,'Yexample.RData')
save(Y,file = 'Yexample.RData')
save(eta, file = 'etaexample.RData')
save(nu0, file = 'nu0example.RData')
save(rho.true, file = 'mixexample.RData')
setwd(../../examples)
setwd('../../examples')
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
source('../source/_lib.R')
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
simsize = ncol(Y)
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
colnames(mu)
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
rho.laplace = hundrediter_laplace[[1]]$rho
head(rho.laplace)
head(rho.true)
print('NormalEM')
hundrediter = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'normal', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
print('NormalEM')
hundrediter = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'normal', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
load('./data/etaexample.RData')
load('./data/muexample.RData')
load('./data/nu0example.RData')
load('./data/Yexample.RData')
load('./data/mixexample.RData')
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
source('../source/_lib.R')
cellTypes = colnames(mu)
print('NormalEM')
hundrediter = cv.emeth(Y,eta,mu,aber = TRUE, V='c', init = 'default',
family = 'normal', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
rho.normal = hundrediter[[1]]$rho
head(rho.normal)
head(rho.true)
