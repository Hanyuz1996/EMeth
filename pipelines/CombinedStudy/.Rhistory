ff0    = "patient_coad_M_info_hyperMeth.txt"
emInfo = read.table(ff0, sep = "\t", header = TRUE, as.is = TRUE)
dim(emInfo)
emInfo[1, ]
table(emInfo$bcr_patient_barcode %in% coad$bcr_patient_barcode)
mat1 = match(emInfo$bcr_patient_barcode, coad$bcr_patient_barcode)
emInfo$nMut = coad$nMut[mat1]
table(colnames(datM) == emInfo$patient_id)
# ------------------------------------------------------------
# read in probes to be used
# ------------------------------------------------------------
load('~/Hutch-Research/Data/Processed/p2use_half_14.RData')
if(1<0){panT = c("CD4T", "CD8T", "Treg")
p2use = levels = list()
level1 = list()
level1[["lymphoid"]] = c("B", "CD4T", "CD8T", "Treg", "NK")
level1[["myeloid"]]  = c("Monocyte", "Neutrophil")
levels[[1]] = level1
level1 = list()
level1[["B_NK"]] = c("B", "NK")
level1[["T"]]    = panT
levels[[2]] = level1
level1 = list()
level1[["B"]]  = "B"
level1[["NK"]] = "NK"
levels[[3]] = level1
level1 = list()
level1[["CD4T_Tregs"]] = c("CD4T", "Tregs")
level1[["CD8T"]] = "CD8T"
levels[[4]] = level1
level1 = list()
level1[["CD4T"]] = "CD4T"
level1[["Tregs"]]   = "Tregs"
levels[[5]] = level1
level1 = list()
level1[["Neutrophil"]] = "Neutrophil"
level1[["Monocyte"]]   = "Monocyte"
levels[[6]] = level1
uct = unique(sam$label)
uct
for(k in 1:length(uct)){
ct1 = uct[k]
ct2 = paste("Non", ct1)
level1 = list()
level1[[ct1]] = ct1
level1[[ct2]] = setdiff(uct, ct1)
levels[[k+6]] = level1
}
level1 = list()
level1[["CD4T"]] = "CD4T"
level1[["CD8T"]]   = "CD8T"
levels[[length(uct)+7]] = level1
length(levels)
path  = "../../figures"
dataType = "methylation"
p2use = list()
for(kk in 1:length(levels)){
cat(kk, date(), "\n")
level1 = levels[[kk]]
nms    = names(level1)
nm1    = sprintf("%s_vs_%s", nms[1], nms[2])
sam2use = which(sam_est$label %in% unlist(level1))
nms     = names(level1)
ctype1  = rep("A", nrow(sam_est))
ctype1[which(sam_est$label %in% level1[[nms[1]]])] = "B"
ctype1[which(sam_est$label %in% level1[[nms[2]]])] = "C"
w2kpB = which(ctype1 == "B")
w2kpC = which(ctype1 == "C")
len = min(length(w2kpB),length(w2kpC),10)
cnt = rep(0,dim(dat_est)[1])
names(cnt) = rownames(dat_est)
for(rep in 1:2){
cat(rep,"\n")
B_sample = sample(w2kpB,len)
C_sample = sample(w2kpC,len)
sam_sub = sam_est[c(B_sample,C_sample),]
dat_sub = dat_est[,c(B_sample,C_sample)]
temp    = probeSelect(level1, sam_sub, dat_sub, path=path, dataType=dataType)
cnt[temp$id] = cnt[temp$id] + 1
}
p2use_nm1    = names(which(cnt>=1))
p2use[[nm1]] = sample(p2use_nm1,min(100,length(p2use_nm1)))
}
nms = names(p2use)
for(nm1 in nms){
p1 = p2use[[nm1]]
p2use[[nm1]] = p1[which(p1 %in% cpgs)]
}
lapply(p2use, dim)
}
genes = NULL
for(lb1 in names(p2use)){
genes = c(genes, p2use[[lb1]])
}
length(genes)
length(unique(genes))
genes = unique(genes)
table(genes %in% rownames(datM))
table(genes %in% rownames(dat))
X  = dat_est[match(genes, rownames(dat_est)),]
dim(X)
colnames(X)
X_gen  = dat_gen[match(genes, rownames(dat_gen)),]
dim(X_gen)
colnames(X_gen)
dim(sam_est)
table(sam_est$id == colnames(X))
table(sam_est$label)
setwd('~/Desktop/EMeth/pipelines/CombinedStudy')
use_beta = TRUE
if(! use_beta){
X = log(X/(1-X))
}
mu = matrix(NA, nrow = dim(X)[1],ncol = length(cellTypes))
row.names(mu) = rownames(X)
colnames(mu) = cellTypes
mu_gen = matrix(NA, nrow = dim(X_gen)[1],ncol = length(cellTypes))
row.names(mu_gen) = rownames(X_gen)
colnames(mu_gen)  = cellTypes
s2 = matrix(NA,nrow=dim(X)[1], ncol = length(cellTypes))
row.names(s2) = rownames(X)
colnames(s2) = cellTypes
s2_gen = matrix(NA,nrow=dim(X_gen)[1], ncol = length(cellTypes))
row.names(s2_gen) = rownames(X_gen)
colnames(s2_gen) = cellTypes
id = 1:nrow(X_gen)
for(ct in cellTypes){
dat.ct = X[,sam_est[which(sam_est[,2]==ct),1]]
mu[,ct] = rowMeans(dat.ct,na.rm=TRUE)
s2[,ct] = apply(dat.ct,1,sd,na.rm=TRUE)^2
dat_gen_ct = X_gen[,sam_gen[which(sam_gen[,2]==ct),1]]
mu_gen[,ct] = rowMeans(dat_gen_ct,na.rm=TRUE)
s2_gen[,ct] = apply(dat_gen_ct,1,sd,na.rm=TRUE)^2
mu_not_na  = which(!is.na(mu[,ct]))
mugen_notna= which(!is.na(mu_gen[,ct]))
s2_not_na  = which(!is.na(s2[,ct]))
s2gen_notna= which(!is.na(s2_gen[,ct]))
id1 = intersect(id,mugen_notna)
id  = intersect(id1,s2gen_notna)
}
mu     = mu[id,]
mu_gen = mu_gen[id,]
s2     = s2[id,]
s2_gen = s2_gen[id,]
table(is.na(s2))
table(is.na(s2_gen))
#----------------------------------------------------------
# Select Probes by looking at residuals
#----------------------------------------------------------
Rsq  = rep(0,ncol(mu))
resi = matrix(NA, nrow = nrow(mu), ncol = ncol(mu))
for(i in 1:length(cellTypes)){
temp <- mu[,-i]
temp <- temp - rowMeans(temp)
Z   <- as.data.frame(cbind(mu[,i],temp))
fit <- lm(Z[,1] ~ .-1 ,data = Z[,-1])
Rsq[i] <- summary(fit)$adj.r.squared
resi[,i] <- (fit$residuals)
}
print(Rsq)
if(1>0){
for(i in 1:length(cellTypes)){
pdf(sprintf('../figures/resi_plot_%s.pdf',cellTypes[i]), width = 13.5, height = 6)
newplot <- hist(resi[,i],breaks = 100)
print(newplot)
dev.off()
}
}
remove_probe = list()
for(i in 1:length(cellTypes)){
remove_probe[[cellTypes[i]]] = rownames(mu)[which(abs(resi[,i])<0.05)]
}
remove_probe = unlist(remove_probe)
remove_probe = unique(remove_probe)
remove_probe = intersect(rownames(mu), remove_probe)
length(remove_probe)
new_probe = setdiff(rownames(mu),remove_probe)
table(new_probe %in% rownames(mu))
table(new_probe %in% rownames(mu_gen))
mu = mu[new_probe,]
mu_gen = mu_gen[new_probe,]
s2 = s2[new_probe,]
s2_gen = s2_gen[new_probe,]
mu = as.matrix(mu)
mu_gen = as.matrix(mu_gen)
s2 = as.matrix(s2)
s2_gen = as.matrix(s2_gen)
print(dim(mu))
print(dim(mu_gen))
print(cor(mu))
save(s2,file = 's2.RData')
#-----------------------------------------------------------
# Check multicolinearity
#-----------------------------------------------------------
if(1<0){
pdf("../figures/corplot-mu.pdf")
#par(mar=c(2,2,2,2))
cormu = melt(cor(mu))
colnames(cormu)[3] = 'correlation'
het <- ggplot(data = cormu, aes(x=Var1, y=Var2, fill = correlation)) +
geom_tile() + theme(axis.title.x=element_blank(),axis.title.y=element_blank())
print(het)
dev.off()
}
set.seed(1750905)
#---------------------------------------------------------
# Generate data from estimated distribution
#---------------------------------------------------------
gen_methy_beta <- function(mu,alpha,sample.size, pi=0, cellnum = 100, noise){
cellNum = cellnum
rho = matrix(NA,nrow = sample.size, ncol = length(cellTypes))
beta = matrix(NA, nrow= nrow(mu), ncol = length(cellTypes))
Y = V = matrix(0, nrow = nrow(mu),ncol = sample.size)
rho   = matrix(0.2*runif(sample.size * length(cellTypes))-0.1,ncol = length(cellTypes))
rho   = rho + matrix(rep(alpha,sample.size),nrow = sample.size)
rho   = rho/rowSums(rho)
eta   = runif(sample.size)*0.1
rho   = diag(1-eta) %*% rho
colnames(rho) = cellTypes
nu0   = runif(nrow(mu))
nu0.m = matrix(rep(nu0,times = sample.size),ncol = sample.size,byrow = FALSE)
Y = mu %*% t(rho) + nu0.m %*% diag(eta)
V = matrix(1/cellNum)
pi.m = rep(runif(sample.size,pi-0.05,pi+0.05),nrow(Y))
idic         = runif(n = nrow(mu)*sample.size) < pi.m
mixerr       = rnorm(n = nrow(mu)*sample.size) * as.vector(t(sqrt(V)))
mixerr[idic] = sqrt(noise) * mixerr[idic]
mixerr       = matrix(mixerr,nrow = nrow(mu), ncol = sample.size, byrow = TRUE)
list(bulk_sample = Y + mixerr, mix = rho, V = V,eta = eta, nu0 = nu0, idic = idic)
}
runsim <- function(simsize,simnoise,simpi,reptime,aber = FALSE, penalty = penalty, cellnum,maxiter = 50 ){
genes2use = rownames(mu_gen)
mean2pert = sample(genes2use, floor(simpi*length(genes2use)))
mugenpert = mu_gen
for(cpg in mean2pert){
cell_temp = sample(cellTypes,7)
mugenpert[cpg,cell_temp] = runif(7)
}
simdata   = gen_methy_beta(mugenpert,alpha,sample.size = simsize, pi = simpi, cellnum = cellnum,noise = simnoise)
print("Data generated")
Y         = simdata$bulk_sample
eta       = simdata$eta
nu0       = simdata$nu0
rho.true  = simdata$mix
idic.true = simdata$idic
V.true    = simdata$V
nu0cor    = rep(0,length(cellTypes))
for(i in 1:length(cellTypes)){
nu0cor[i] = cor(nu0,mu[,i])
}
sigma_c   = 0.1
sigma_a   = simnoise * sigma_c
#-------------------------------------------------------------
# Estimating rho_qi by several methods: wls; ls; rls; qp
#-------------------------------------------------------------
methods = c("LaplaceEM","OriEM","svr","ls","rls","qp")
rho     = array(data = NA, dim = c(nrow(rho.true),ncol(rho.true),length(methods)+1),
dimnames = list(1:nrow(rho.true),cellTypes,c(methods,"true")))
err     = array(data = NA, dim = c(nrow(rho.true),ncol(rho.true),length(methods)),
dimnames = list(1:nrow(rho.true),cellTypes,methods))
rho[,,length(methods)+1]=rho.true
temp       = runif(simsize * length(cellTypes)) * 0.2 -0.1
rho_init   = matrix(temp,ncol = length(cellTypes))
nu0_init   = runif(nrow(Y))
sigma_c_init = 0.1
lambda_init  = 2
pi_a   = rep(0.5,simsize)
C = c(0.1,1/sqrt(10),1,sqrt(10),10)
for(j in 1:ncol(Y)){
if(j %% 50 == 0){ cat(j, date(), "\n") }
y    = Y[,j]
X    = as.data.frame(mu)
Xmat = mu
cv_svr = rep(0,5)
svrmodel1       = svm(y~., data = X,kernel = 'linear', cost = 0.1, cross= 5)
cv_svr[1]       = mean(svrmodel1$MSE)
svrmodel2       = svm(y~., data = X,kernel = 'linear', cost = 1/sqrt(10), cross= 5)
cv_svr[2]       = mean(svrmodel2$MSE)
svrmodel3       = svm(y~., data = X,kernel = 'linear', cost = 1, cross= 5)
cv_svr[3]       = mean(svrmodel2$MSE)
svrmodel4       = svm(y~., data = X,kernel = 'linear', cost = sqrt(10), cross= 5)
cv_svr[4]       = mean(svrmodel2$MSE)
svrmodel5       = svm(y~., data = X,kernel = 'linear', cost = 10)
cv_svr[5]       = mean(svrmodel5$MSE)
best_svr        = which.min(cv_svr)
svrmodel        = svm(y~., data = X, kernel = 'linear', cost = C[best_svr])
temp            = (t(svrmodel$coefs) %*% svrmodel$SV)
temp[temp < 0]  = 0
rho[j,,'svr']   = (1-eta[j])*temp/sum(temp)
temp            = lm(y ~ .-1,data = X)$coefficients
temp[temp < 0]  = 0
rho[j,,'ls']    = (1-eta[j])*temp/sum(temp)
temp            = rlm(y ~ .-1,data = X)$coefficients
temp[temp < 0]  = 0
rho[j,,'rls']   = (1-eta[j])*temp/sum(temp)
A = rbind(diag(rep(1,length(cellTypes))),rep(-1,length(cellTypes)))
b = c(rep(0,length(cellTypes)),-1+eta[j])
D = t(Xmat) %*% Xmat
d = t(t(Xmat) %*% y)
rho[j,,'qp']   = (solve.QP(D,d,t(A),b)$solution)
}
rho_init = rho[,,'ls']
K = nrow(Y)
Y_ab     = Y - mu %*% t(rho_init)
if(aber){
for(k in 1:K){
nu0_init[k] = min(1,max(0,sum(eta * Y_ab[k,])/sum( eta^2)))
}
}
#temp <- apply(s2,1,max)
#temp <- temp/median(temp)
#lb <- quantile(temp,0.15)
#ub <- quantile(temp,0.85)
#temp[temp<lb] <- lb
#temp[temp>ub] <- ub
#W <- matrix(rep(temp,ncol(Y)),ncol = ncol(Y),byrow = FALSE)
print('LaplaceEM')
hundrediter_laplace = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'laplace', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
rho[,,'LaplaceEM'] = hundrediter_laplace[[1]]$rho
print('OriEM')
hundrediter = cv.emeth(Y,eta,mu,aber = aber, V='c', init = 'default',
family = 'normal', nu = penalty, folds = 5, maxiter = 50, verbose = TRUE)
rho[,,'OriEM'] = hundrediter[[1]]$rho
for(k in 1:length(methods)){
err[,,k] = (rho[,,k]-rho.true)^2
}
err.mean = sqrt(apply(err,c(2,3),mean))
cormat <- matrix(NA,nrow = length(cellTypes),ncol = length(methods))
colnames(cormat) <- methods
rownames(cormat) <- cellTypes
rss <- matrix(NA,nrow = length(cellTypes),ncol = length(methods))
colnames(rss) <- methods
rownames(rss) <- cellTypes
print(table(is.na(rho.true)))
print(table(is.na(rho)))
for(i in 1:length(cellTypes)){{
cormat[i,] <- sapply(1:length(methods), FUN = function(j){{
cor(rho[,i,methods[j]],rho.true[,i])
}})
rss[i,] <- sapply(1:length(methods), FUN = function(j){{
temp <- lm(rho.true[,i]~rho[,i,methods[j]])
return(sum(temp$residuals^2))
}})
}}
#  dir.create(sprintf('../figures/%s',Sys.Date()))
#  dir.create(sprintf('../figures/%s/%d',Sys.Date(),reptime))
#  for(i in 1:length(cellTypes)){{
#  pdf(sprintf('../figures/%s/%d/%s-%s-%s-estimate-vs-true.pdf',Sys.Date(),reptime,cellnum, simnoise, cellTypes[i]))
#  plist = list()
#  plist <- lapply(1:length(methods), FUN = function(j){{
#    tempdata = cbind(res.rho[,i,methods[j]],rho.true[,i])
#    colnames(tempdata) <- c("methylation","true")
#    newplot <- ggplot(data = as.data.frame(tempdata), aes(x=methylation,y=true))+ xlim(0,0.3) + ylim(0,0.3) +
#      geom_point() + geom_abline(intercept = 0,slope = 1) + ggtitle(methods[j])
#  }})
#  grid.arrange(grobs = plist,ncol=2)
#  dev.off()
#}}
#print(nu0cor)
list(rho = rho, err = err.mean, cor = cormat,
laplace = hundrediter_laplace[[1]],
weight = hundrediter_weight[[1]],
het = hundrediter_het[[1]],
ori = hundrediter[[1]],
true = simdata,
rss = rss,
nu0cor = nu0cor)
}
simsize  = 10
simnoise = 2   #(1,2,3,4,5,10)
simpi = 0.1       #(0.01,0.1,0.5,0.9)
alpha = rep(1/7,7)
#penalty = 1000
penalty= (dim(mu)[1])*(10^seq(-2,1,0.5))
cellnum = 250
#true.sigma = c(simnoise*0.05,0.05)
reptime = 2      #1:100
methods = c("LaplaceEM","OriEM","svr","ls","rls","qp")
res.err = res.cor = res.rss = array(data = NA, dim = c(length(cellTypes),length(methods),reptime),
dimnames = list(cellTypes,methods,1:reptime))
#res.sigma = matrix(NA, nrow = reptime, ncol = 2)
res.pi    = matrix(-1,reptime,4)
res.rho   = array(data = NA, dim = c(simsize,length(cellTypes),length(methods)+1),
dimnames = list(1:simsize,cellTypes,c(methods,"true")))
res.nu0   = matrix(-2,reptime,4)
res.iter  = matrix(0,reptime,4)
res.confu = array(data = NA, dim = c(reptime, 4,4),
dimnames = list(1:reptime,c("LaplaceEM","MaxVarEM","BinomEM","OriEM"),c("tt","tf","ft","ff")))
res.sigma_c = matrix(-1,reptime,4)
res.sigma_a = matrix(-1,reptime,4)
for(i in 1:reptime){{
cat("-------------------\n")
cat(i, date(), "\n")
result        = runsim(simsize,simnoise,simpi,aber = TRUE,reptime=i,penalty = penalty,cellnum)
true          = result$true
res.rho       = result$rho
res.err[,,i]  = result$err
res.cor[,,i]  = result$cor
res.rss[,,i]  = result$rss
temp   = true$idic
temp_t = which(temp == TRUE)
temp_f = which(temp == FALSE)
total  = length(temp)
for(j in 1:4){{
res.nu0[i,j] = cor(result[[j+3]]$nu0, true$nu0)
res.pi[i,j]  = mean(result[[j+3]]$pi_a)
res.sigma_c[i,j]  = result[[j+3]]$sigma_c
res.sigma_a[i,j]  = result[[j+3]]$sigma_c*result[[j+3]]$lambda
res.iter[i,j]= result[[j+3]]$iter
res.idic = (result[[j+3]]$gamma)>0.5
res.confu[i,1,j] = mean(res.idic[temp_t] == TRUE)
res.confu[i,2,j] = mean(res.idic[temp_t] == FALSE)
res.confu[i,3,j] = mean(res.idic[temp_f] == TRUE)
res.confu[i,4,j] = mean(res.idic[temp_f] == FALSE)
}}
cat(i,'-th repetition ends on', date())
}}
setting = sprintf('%d_%d_%d',cellnum,simsize,simnoise)
save(res.rho,file = sprintf('rho_%s.RData', setting) )
save(res.err,file = sprintf('err_%s.RData', setting))
save(res.cor,file = sprintf('cor_%s.RData', setting))
save(res.nu0,file = sprintf('nu0_%s.RData', setting))
dir.create(sprintf('../figures/%s',Sys.Date()))
pdf(sprintf("../figures/%s/nu0_%d_%d_%d.pdf",Sys.Date(),cellnum,simsize,simnoise), width = 20, height = 8)
nu0_plot = data.frame(cbind(result[[7]]$nu0,true$nu0))
nu0_plot_het = data.frame(cbind(result[[6]]$nu0,true$nu0))
nu0_plot_weight = data.frame(cbind(result[[5]]$nu0,true$nu0))
nu0_plot_laplace = data.frame(cbind(result[[4]]$nu0,true$nu0))
colnames(nu0_plot) = c('nu0_est','nu0_true')
colnames(nu0_plot_het) = c('nu0_est_het','nu0_true')
colnames(nu0_plot_weight) = c('nu0_est_weight','nu0_true')
colnames(nu0_plot_laplace) = c('nu0_est_laplace','nu0_true')
nu0scatter <- ggplot(data = nu0_plot, aes(x=nu0_true, y=nu0_est)) + xlim(0,1) + ylim(0,1) +
geom_point() + geom_abline(intercept = 0,slope = 1)
nu0scatter_het <- ggplot(data = nu0_plot_het, aes(x=nu0_true, y=nu0_est_het)) + xlim(0,1) + ylim(0,1) +
geom_point() + geom_abline(intercept = 0,slope = 1)
nu0weight <- ggplot(data = nu0_plot_weight, aes(x=nu0_true, y=nu0_est_weight)) + xlim(0,1) + ylim(0,1) +
geom_point() + geom_abline(intercept = 0,slope = 1)
nu0laplace <- ggplot(data = nu0_plot_laplace, aes(x=nu0_true, y=nu0_est_laplace)) + xlim(0,1) + ylim(0,1) +
geom_point() + geom_abline(intercept = 0,slope = 1)
grid.arrange(nu0scatter,nu0scatter_het,nu0weight,nu0laplace,ncol =2)
dev.off()
pdf(sprintf("../figures/%s/rho_%d_%d_%d.pdf",Sys.Date(),cellnum,simsize,simnoise), width = 20, height = 8)
res_rho_plot = data.frame(res.rho[1,,])
EMWeight <-ggplot(data = res_rho_plot, aes(x=true, y=MaxVarEM)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
EMLaplace <-ggplot(data = res_rho_plot, aes(x=true, y=LaplaceEM)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
EMHet <-ggplot(data = res_rho_plot, aes(x=true, y=BinomEM)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
EMOri <-ggplot(data = res_rho_plot, aes(x=true, y=OriEM)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
svr <-ggplot(data = res_rho_plot, aes(x=true, y=svr)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
ls <-ggplot(data = res_rho_plot, aes(x=true, y=ls)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
rls <-ggplot(data = res_rho_plot, aes(x=true, y=rls)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
qp  <-ggplot(data = res_rho_plot, aes(x=true, y=qp)) + xlim(0,0.5) + ylim(0,0.5) +
geom_point() + geom_abline(intercept = 0,slope = 1)
grid.arrange(EMWeight,EMLaplace, EMHet,EMOri,svr,ls,rls,qp,ncol=4)
dev.off()
pdf(sprintf("../figures/%s/error_%d_%d_%d.pdf",Sys.Date(),cellnum,simsize,simnoise), width = 12, height = 4)
err.mean = melt(res.err)
colnames(err.mean) = c("CellTypes","Methods","Repitition","RMSE")
err_meanplot <- ggplot(data = err.mean, aes(x=CellTypes,
y=RMSE,fill = Methods))+geom_boxplot()+theme_set(theme_cowplot())
print(err_meanplot)
dev.off()
cellTypes <- cellTypes
cormat <- matrix(NA,nrow = length(cellTypes),ncol = length(methods))
colnames(cormat) <- methods
rownames(cormat) <- cellTypes
for(i in 1:length(cellTypes)){{
cormat[i,] <- sapply(1:length(methods), FUN = function(j){{
cor(res.rho[,i,methods[j]],true$mix[,i])
}})
}}
print("Total Error")
print(colMeans(apply(res.err,c(1,2),mean)))
print(colMeans(apply(res.err,c(1,2),sd)))
print("Correlation")
print(colMeans(apply(res.cor,c(1,2),mean)))
print(colMeans(apply(res.cor,c(1,2),sd)))
print("RSS")
print(colMeans(apply(res.rss,c(1,2),mean)))
print(colMeans(apply(res.rss,c(1,2),sd)))
fmt = "$ \\lambda = %d $   & %1.2e(%1.2e) & %1.2e(%1.2e) & %1.2e(%1.2e) & %1.2e(%1.2e) & %1.2e(%1.2e) & %1.2e(%1.2e) \\\\ "
temp = rbind(colMeans(apply(res.err^2,c(1,2),mean)),colMeans(apply(res.err^2,c(1,2),sd)))
num = as.list(matrix(temp,nrow = 1,byrow = FALSE))
rep = c(simnoise,num)
do.call(sprintf,append(fmt,rep))
#bias of pi & nu0 & bias of sigma_a(=simnoise /cellNum) % sigma_c(=1/cellNum) & FCR & FAR & Iter
fmt2 = "\\multirow2}}{{*}}{{$\\lambda = %d$}}
& OriEM    & %.3f(%.3f) & %.3f(%.3f)  & %.3f(%.3f)  & %.3f(%.3f)  &%.3f(%.3f) &%.3f(%.3f) & %3.2f(%1.2f)  \\\\
& HeteroEM & %.3f(%.3f) & %.3f(%.3f)  & %.3f(%.3f)  & %.3f(%.3f)  &%.3f(%.3f) &%.3f(%.3f) & %3.2f(%1.2f)  \\\\
& MaxVarEM & %.3f(%.3f) & %.3f(%.3f)  & %.3f(%.3f)  & %.3f(%.3f)  &%.3f(%.3f) &%.3f(%.3f) & %3.2f(%1.2f)  \\\\
& LaplaceEM & %.3f(%.3f) & %.3f(%.3f)  & %.3f(%.3f)  & %.3f(%.3f)  &%.3f(%.3f) &%.3f(%.3f) & %3.2f(%1.2f)  \\\\"
temp2 = rbind(colMeans(abs(res.pi-simpi)),apply(abs(res.pi-simpi),2,sd),
colMeans(res.nu0),apply(abs(res.nu0),2,sd),
colMeans(abs(res.sigma_a-simnoise/cellnum)),
apply(abs(res.sigma_a-simnoise/cellnum),2,sd),
colMeans(abs(res.sigma_c-1/cellnum)),
apply(abs(res.sigma_c-1/cellnum),2,sd),
colMeans(res.confu[,,2]),apply(res.confu[,,2],2,sd),
colMeans(res.confu[,,3]),apply(res.confu[,,3],2,sd),
colMeans(res.iter),apply(res.iter,2,sd))
num = as.list(matrix(temp2,nrow = 1,byrow = FALSE))
rep = c(simnoise,num)
do.call(sprintf,append(fmt2,rep))
quit(save = 'no')
